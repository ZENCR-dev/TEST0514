---
description:
globs:
alwaysApply: false
---
# 核心代码质量与最佳实践

## 1. 代码可读性与命名规范
- 变量、函数、类、文件命名应清晰、有意义，避免缩写。
- 遵循驼峰命名法（camelCase）和帕斯卡命名法（PascalCase）约定。

## 2. 函数与模块设计
- **单一职责原则 (SRP)**：每个函数或模块只做一件事，并把它做好。
- **开闭原则 (OCP)**：对扩展开放，对修改封闭。
- 避免过长的函数和文件。

## 3. 抽象与复用 (DRY)
- 提取重复代码到独立的工具函数或通用模块。
- 关注通用逻辑的抽象，减少代码冗余。

## 4. 错误处理
- 统一的错误响应格式，例如：`{ "statusCode": 400, "message": "错误信息", "error": "Bad Request" }`
- 区分业务错误和系统错误，并进行适当的日志记录。
- 使用NestJS的异常过滤器（Exception Filters）进行全局错误处理。

## 5. 日志记录
- 明确日志级别（Debug, Info, Warn, Error, Fatal）的使用场景。
- 避免记录敏感信息到日志中。
- 集成统一的日志收集与监控系统。

## 6. 注释规范
- 避免对"做什么"进行注释，专注于"为什么"这么做或解释复杂逻辑。
- 对公共API接口、复杂算法、非显而易见的副作用添加JSDoc注释。

## 7. 配置管理
- 将所有敏感信息和环境相关的配置通过环境变量管理。
- 使用NestJS的ConfigModule进行配置加载和验证。




