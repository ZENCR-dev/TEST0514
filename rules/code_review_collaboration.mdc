---
description:
globs:
alwaysApply: false
---
# 代码审查与团队协作规范

## 1. 版本控制 (Git)
- **分支策略**：遵循统一的分支策略（例如 Git Flow 或 GitHub Flow）。
- **提交信息**：使用清晰、简洁、有意义的提交信息，遵循Conventional Commits规范（例如 `feat: add user authentication`）。
- **原子提交**：每次提交只包含一个逻辑上的变更，避免大而全的提交。

## 2. 代码审查 (Code Review)
- **目的**：确保代码质量、发现潜在问题、知识共享、提升团队技能。
- **流程**：所有代码变更都必须通过至少一名指定审查者的审查才能合并到主分支。
- **审查范围**：关注代码的可读性、可维护性、性能、安全性、错误处理和测试覆盖率。
- **及时反馈**：审查者应及时提供反馈，被审查者应及时响应。
- **积极参与**：团队成员应积极参与代码审查，互相学习。

## 3. 协作与沟通
- **及时沟通**：在遇到问题或需要帮助时，及时向团队成员寻求帮助或进行讨论。
- **任务分配**：明确任务负责人，避免重复工作或遗漏。
- **会议参与**：积极参与站会、技术评审会等团队会议。
- **文档共享**：及时更新和共享技术文档，确保信息流通。

## 4. 问题追踪
- 使用统一的问题追踪系统（如 Jira, Asana）管理任务、Bug和功能需求。
- 确保问题状态更新及时，信息完整。






