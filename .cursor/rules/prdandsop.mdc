---
description: 
globs: 
alwaysApply: false
---
产品需求文档 (PRD)
项目名称： 新西兰中医师开方平台
版本： 1.1 (MVP 0.5 - 前端测试版)
日期： 2025年5月10日
作者： Gemini (AI Assistant)
1. 引言
本文档定义了新西兰中医师开方平台 MVP 0.5 阶段（前端测试版）的功能和 UI/UX 需求。该版本旨在提供一个极简的前端工具集，用于快速验证医生开方、药房识别处方、患者查找药房的核心流程概念，并收集初步用户反馈，为后续后端和完整平台开发奠定基础。本阶段不涉及服务器、数据库和后端代码。
(1.1 项目目标 和 1.2 核心业务逻辑 - MVP 0.5 部分同前)
2. 用户角色与特征
(同 PRD 1.1 的 2. 用户角色与特征，但在 MVP 0.5 阶段，用户无需注册登录)
3. 功能需求 (MVP 0.5)
(本节内容是对 PRD 1.1 功能需求的简化，仅保留 MVP 0.5 范围内的功能点)
•	3.1 医生端 (Frontend Application)
o	FR1.1 商品查找与选择: 用户（模拟医生）在界面上查找、浏览内嵌的中药SKU列表。
o	FR1.2 处方创建: 选择药品SKU和数量，添加到处方列表。
o	FR1.3 价格计算与展示: 根据内嵌的零售单价和成本价，显示处方总零售价和总成本价。允许用户输入或选择额外的处方费，并显示总零售价（含处方费）。
o	FR1.4 处方单生成与二维码: 根据处方内容生成包含平台订单号（模拟生成）、药品列表、数量、价格信息的文本，生成二维码图像，并嵌入处方单样式页面。
o	FR1.5 处方单输出: 提供将处方单页面保存为 PDF 或图片的模拟功能，并提供分享（邮件、链接）的引导提示。
•	3.2 患者端 (Online - Public Page)
o	FR2.1 查找附近药房: 提供一个公开、无需登录的自适应网页界面。允许用户根据地理位置或手动输入地址，在地图或列表中查找内嵌的合作药房位置和基本信息。
•	3.3 药房端 (Frontend Application)
o	FR3.1 界面适应性与摄像头访问: 药房操作界面必须是自适应的，方便在移动设备上使用。能直接调用设备的摄像头进行二维码扫描。
o	FR3.2 二维码扫描与文本解析: 提供界面进行二维码扫描，前端应用解析二维码文本，提取平台订单号（模拟）、SKU代码和数量。
o	FR3.3 处方内容匹配与报价计算: 根据提取的SKU代码和数量，在前端内嵌的药房商品目录（含批发价）中匹配查找，显示对应的药品名称、数量，并计算并显示该处方内容在该药房的批发总价。
o	FR3.4 报价信息展示: 清晰展示解析出的处方内容、计算的批发总价和关联的平台订单号（模拟）。
•	3.4 核心技术与数据 (内嵌前端)
o	FR4.1 内嵌数据: 中药SKU列表（代码、名称、零售价、成本价、假设批发价），少量药房位置信息（名称、地址、地理坐标）。
o	FR4.2 二维码文本格式: 定义清晰、统一的二维码内嵌文本格式。
4. UI/UX 设计 (MVP 0.5)
本节描述 MVP 0.5 版本各用户角色的主要界面和交互体验。
4.1 医生端界面 (Focus: 清晰、高效的处方创建)
•	整体布局: 采用两栏或三栏布局。左侧或顶部为药品搜索和分类区域，中间为选中的药品列表（处方草稿），右侧或底部为价格汇总和处方单生成区域。
•	药品搜索/选择区域:
o	醒目的搜索框，支持按名称、拼音、代码模糊搜索。
o	药品列表清晰展示药品名称、规格（如果需要）、零售单价。可考虑按分类筛选。
o	每个药品旁有明确的“添加到处方”按钮或通过点击添加到右侧列表。添加成功后有视觉反馈（如按钮变色、列表项出现）。
•	处方草稿区域:
o	清晰列出已选药品，每行显示药品名称、数量。
o	数量旁有直观的“+”、“-”按钮或可编辑输入框，方便调整数量。
o	每行有“移除”按钮或图标。
o	顶部或底部实时更新药品总数。
•	价格汇总与处方费设置区域:
o	突出显示处方总零售价、总成本价。
o	“处方费”设置区域：一个带有当前金额显示的滑块或数字输入框，方便医生设置额外费用。调整时总零售价实时更新。
o	底部有醒目的“生成处方单”按钮。
•	处方单展示页面:
o	页面头部显示“处方单”标题，下方显示（模拟的）平台订单号。
o	清晰展示药品列表、数量、零售单价、药品零售总价、处方费、总零售价（含处方费）。
o	页面中心位置醒目展示生成的二维码图像。
o	二维码下方或侧边提供明确的“打印”、“下载 PDF”、“分享处方单”按钮。点击分享按钮应弹出模拟分享提示或复制链接功能。
o	提供简短的“请将此单交给您选择的合作药房”提示。
•	视觉风格: 简洁、专业、易于操作。避免过多装饰。
4.2 患者端界面 (Focus: 便捷、直观的药房查找)
•	整体布局: 单页应用，顶部为标题和查找区域，下方为药房列表和地图区域。
•	查找区域:
o	醒目的搜索框，提示用户输入地址或邮编。
o	一个明显的“使用我的当前位置”按钮。点击后触发浏览器地理位置权限请求。
•	结果展示区域:
o	地图视图: 如果用户允许使用地理位置，中心化用户位置，地图上用图钉标记附近药房。点击图钉显示药房名称、地址、距离等信息。可拖动地图查看其他区域。
o	列表视图: 显示药房列表，每项包含药房名称、地址、与用户位置的距离（如果获取到）。列表应可滚动。
o	提供地图和列表视图之间的切换按钮。
o	如果搜索不到结果，显示友好的提示。
•	视觉风格: 干净、直观，地图加载流畅。在移动设备上布局合理，方便单手操作。
4.3 药房端界面 (Focus: 高效、准确的扫码与报价)
•	整体布局: 页面需完全自适应，适合在手机或平板上全屏使用。顶部为标题，中心为扫描区域，下方为解析结果和报价展示区域。
•	扫描区域:
o	页面中心位置为摄像头预览区域，有扫描框提示用户对准二维码。
o	一个明显的“开始扫描”或“重新扫描”按钮。
o	提供手动输入二维码文本的备选入口（链接或按钮）。
•	扫描过程反馈:
o	扫描成功或失败时有声音提示或震动反馈。
o	摄像头预览区域显示“正在扫描...”或其他状态提示。
o	成功扫描后，预览区域暂停或消失，进入结果展示区域。
•	解析结果与报价展示区域:
o	清晰的标题，如“处方内容与报价”。
o	显示解析出的（模拟）平台订单号。
o	列出处方中的药品，每行显示药品名称、数量。
o	醒目展示计算出的该处方在该药房的批发总价。
o	提供“确认信息”按钮或简单的下一步指引（MVP 0.5 阶段）。
•	视觉风格: 简洁、高对比度，确保在不同光线下都能看清界面。扫描过程流畅，结果展示清晰。按钮易于点击。
5. 非功能性需求 (MVP 0.5)
•	NF1.1 可用性: 界面简洁、操作流程清晰。药房端和患者端界面在主流移动设备上自适应流畅，支持摄像头和地理位置调用。
•	NF1.2 性能: 页面加载速度快，前端计算和渲染流畅。
•	NF1.3 可维护性: 代码结构清晰，为后续集成后端预留接口。
•	NF1.4 范围限制: 所有数据（SKU、价格、药房位置）内嵌前端，非持久化，非实时，非安全。
6. 成功指标 (MVP 0.5)
•	医生用户成功生成带有二维码的处方单。
•	药房用户成功扫描二维码并解析出处方内容。
•	药房端前端成功计算并展示批发总价。
•	患者用户成功使用查找药房功能并看到结果。
•	收集到的用户对各前端界面 UI/UX 和流程的反馈。
7. 范围外 (Out of Scope - MVP 0.5)
•	所有用户注册登录、账户管理。
•	后端开发、数据库持久化。
•	前后端 API 调用与数据交互。
•	订单保存、历史记录。
•	支付功能。
•	报价单提交、审核、管理。
•	采购订单生成与管理。
•	平台管理员后台界面。
•	实时库存、批发价的动态管理。
•	数据安全与隐私（在此阶段不处理真实敏感数据）。
•	复杂报表和统计。
________________________________________
MVP 0.5 版本 SOP (基于前端前置 - 简版):
(本 SOP 仅适用于 MVP 0.5 前端测试版)
1. 技术栈选择与架构设计
•	核心: Next.js Frontend (TypeScript, React)。
•	依赖: JS 二维码生成库 (qrcode-generator 或类似), JS 二维码扫描库 (html5-qrcode 或类似), 地图库 (Leaflet, Mapbox GL JS), 可能需要前端状态管理库 (如果页面间需要少量状态共享)。
•	架构: 单个 Next.js 应用，纯前端渲染，所有数据内嵌或模拟。
•	初步后端架构倾向: 在开始前端开发前，明确偏向 WooCommerce 或 Medusa，并设计一份未来核心 API 的 Mock API 合同（Endpoint, 方法, 输入输出结构），以及核心数据模型概念（字段名、类型）。 前端开发时严格按照这份 Mock API 合同进行。
2. 开发阶段与任务规划
•	总时间估算: 1-2 周 (非常紧凑的 MVP 节奏)
•	阶段 0.5.0: 启动与基础设计 (1-2天)
o	任务: 确认 PRD MVP 0.5 范围。团队讨论并明确偏向的后端架构（WC 或 Medusa），设计核心 Mock API 合同和数据模型概念。 初始化 Next.js 项目，配置 TypeScript, ESLint, Prettier。设置 Git 仓库。
o	关键产出: Mock API 合同文档（或接口定义文件），初始化 Next.js 仓库。
•	阶段 0.5.1: 前端基础架构与 Mock 数据 (2-3天)
o	任务: 搭建 Next.js 路由（医生处方页, 患者药房查找页, 药房扫码页）。内嵌 SKU 数据、药房位置数据。实现 Mock API 服务或在前端模拟后端 API 调用逻辑。 搭建基础 UI 组件库。
o	关键产出: 带有 Mock 数据的基础前端应用框架，可访问的各页面空壳。
•	阶段 0.5.2: 医生端核心功能实现 (1-2天)
o	任务: 实现 SKU 展示、选择、数量调整。前端计算价格。实现二维码文本编码和图像生成。实现处方单页面展示和输出（打印/PDF/分享模拟）。
o	关键解决方案: JS 库生成二维码，前端逻辑计算。
o	关键产出: 可用的医生端处方生成工具。
•	阶段 0.5.3: 药房端核心功能实现 (1-2天)
o	任务: 实现自适应界面布局。集成二维码扫描库，实现摄像头调用和扫描。实现前端二维码文本解析。根据解析结果，使用内嵌数据匹配 SKU 并计算批发价，前端展示结果。
o	关键解决方案: JS 库实现扫描和解析，前端 JS 计算。
o	关键产出: 可用的药房端扫码报价工具。
•	阶段 0.5.4: 患者端药房查找实现 (0.5-1天)
o	任务: 实现药房查找界面（位置输入/获取）。使用内嵌数据和地图库展示药房位置。
o	关键解决方案: JS 地理位置 API，地图库。
o	关键产出: 可用的患者端药房查找页面。
•	阶段 0.5.5: 集成与测试 (0.5-1天)
o	任务: 集成所有前端页面，确保流程顺畅。进行功能和可用性测试。
o	关键产出: 集成完成的前端测试版本。
•	阶段 0.5.6: 部署上线 (0.5天)
o	任务: 部署 Next.js 应用到 Vercel/Netlify。提供公开访问链接。
o	关键产出: 可公开访问的 MVP 0.5 前端测试应用。
3. 开发规范与规则 (MVP 0.5 前端)
•	代码规范: 遵循 React/Next.js/TypeScript 代码风格指南。使用 ESLint, Prettier。
•	组件化: 严格遵循组件化原则。
•	数据管理: 内嵌数据集中管理，不要分散在各组件中。明确标记为 Mock 数据。
•	接口预留: 所有未来需要与后端交互的功能点（处方提交、报价单提交、用户认证等），在代码中预留函数或 Hook，使用 Mock API 实现其行为，但不直接实现真实后端调用逻辑。
•	版本控制: 使用 Git。
•	测试: 重点进行前端单元测试和组件测试。手动进行功能和可用性测试。
4. 运维与监控 (MVP 0.5)
•	运维: 主要依赖 Vercel/Netlify 提供的托管服务。
•	监控: 依赖 Vercel/Netlify 提供的基础流量和性能监控。可以在前端集成简单的日志库，将用户操作或错误信息发送到日志服务（如 LogRocket 免费层，或简单的 webhook），但 MVP 0.5 阶段可能超出范围。最简陋的方式是依赖 Vercel/Netlify 的部署日志。
结论:
MVP 0.5 的“前端前置”方案是可行的，能帮助快速验证核心概念和 UI/UX。在开始前端开发前，明确后端架构倾向并设计 Mock API 合同是成功的关键，这样可以最大程度地确保前端代码在后续迭代中可复用，降低技术债。这份简化的 SOP 为这个阶段提供了明确的任务和规划。

一、 PRD MVP 0.5 (前端测试版) 修订建议
1.	引言 (Section 1)
o	现有内容: 定义了前端测试版的功能和UI/UX需求，旨在快速验证核心流程概念。
o	修订建议:
	在1.1 项目目标中，明确加入一条关于合规风险规避的目标：“在验证核心流程概念的同时，本阶段致力于通过最小化真实数据交互和明确的测试标识，最大限度规避早期合规风险。”
	在1.2 核心业务逻辑描述后，增加一小段：“重要提示：MVP 0.5阶段所有涉及的用户信息、处方内容、药品价格及药房数据均为模拟或虚构，不代表真实情况，平台不处理任何真实交易或敏感个人信息。”
2.	用户角色与特征 (Section 2)
o	现有内容: 提及用户无需注册登录。
o	修订建议: 保持现有设定。可以在描述每个角色时，再次强调其在MVP 0.5阶段的“模拟”性质，例如：“中医师 (Doctor): (模拟角色) 在前端界面上进行开方操作...”
3.	功能需求 (MVP 0.5) (Section 3)
o	FR1.4 处方单生成与二维码:
	现有内容: 根据处方内容生成包含平台订单号（模拟生成）、药品列表、数量、价格信息的文本...
	修订建议: 强调模拟性，例如：“...平台订单号（系统前端模拟生成，非真实订单号）...”。
o	FR3.2 二维码扫描与文本解析:
	现有内容: ...提取平台订单号（模拟）、SKU代码和数量。
	修订建议: 同样强调：“...平台订单号（来自模拟生成的二维码，非真实订单号）...”
o	FR4.1 内嵌数据:
	现有内容: 中药SKU列表...少量药房位置信息...
	修订建议: 增加一句：“所有内嵌数据均为虚构或公开可用信息的模拟，不包含任何真实的个人可识别信息 (PII) 或个人健康信息 (PHI)。”
o	新增功能点 (或在UI/UX部分强调):
	FR X.X 明确的测试版本标识: “所有关键页面（特别是处方展示、药品信息、价格、药房列表页面）需在显著位置（如页眉、页脚或浮动提示）持续显示‘测试版本 - 仅供演示 - 数据均为模拟’等清晰的免责声明。” (对应合规建议中的“明确的‘测试/模拟’标识与免责声明”)
4.	UI/UX 设计 (MVP 0.5) (Section 4)
o	4.1 医生端界面 - 价格汇总与处方费设置区域:
	现有内容: 突出显示处方总零售价、总成本价。
	修订建议: 在这些价格旁边或下方用小字注明“(模拟价格)”。
o	4.1 医生端界面 - 处方单展示页面:
	现有内容: 页面头部显示“处方单”标题，下方显示（模拟的）平台订单号。清晰展示药品列表、数量、零售单价、药品零售总价、处方费、总零售价（含处方费）。
	修订建议:
	在“处方单”标题旁或下方显著位置加入之前建议的“测试版本 - 仅供演示 - 数据均为模拟 - 不构成真实医疗建议”标识。
	所有价格信息旁标注“(模拟)”。
	在“打印”、“下载 PDF”、“分享处方单”按钮操作的模拟提示中，应包含“此为模拟操作，不会产生真实文件或分享”的说明。
o	4.3 药房端界面 - 解析结果与报价展示区域:
	现有内容: 显示解析出的（模拟）平台订单号。列出处方中的药品...醒目展示计算出的该处方在该药房的批发总价。
	修订建议:
	同样在此区域的显著位置加入“测试版本 - 仅供演示 - 数据均为模拟”标识。
	所有价格信息旁标注“(模拟)”。
o	新增UI/UX考虑点:
	模拟“同意”流程的界面元素: “在医生端生成处方单前或药房端进行扫码操作前，可设计一个模拟的‘我已阅读并理解此为测试版本，所有数据均为模拟’的勾选框（默认不勾选）和‘继续’按钮。用户需勾选后才能进行下一步操作。” (对应合规建议中的“模拟‘同意’流程”)
5.	非功能性需求 (MVP 0.5) (Section 5)
o	NF1.4 范围限制:
	现有内容: 所有数据（SKU、价格、药房位置）内嵌前端，非持久化，非实时，非安全。
	修订建议: 扩展为：“所有数据（SKU、价格、药房位置、任何用户输入信息）均为前端内嵌或临时生成，非持久化，非实时，不与任何后端服务器交互。本阶段不处理任何真实个人身份信息 (PII) 或个人健康信息 (PHI)，因此不涉及真实数据安全与隐私问题。但代码结构应考虑未来集成安全措施的扩展性。” (对应合规建议中的“最小化数据收集”和“为未来真实数据处理设计可扩展性”)
6.	范围外 (Out of Scope - MVP 0.5) (Section 7)
o	现有内容: ...数据安全与隐私（在此阶段不处理真实敏感数据）。
o	修订建议: 可以更明确地表述为：“所有与真实个人身份信息 (PII) 和个人健康信息 (PHI) 相关的收集、存储、处理、传输；以及任何形式的真实用户账户管理和数据持久化。”
二、 SOP MVP 0.5 (基于前端前置 - 简版) 修订建议
1.	技术栈选择与架构设计 (Section 1)
o	初步后端架构倾向:
	现有内容: ...明确偏向 WooCommerce 或 Medusa，并设计一份未来核心 API 的 Mock API 合同...
	修订建议: 增加一句：“此 Mock API 合同的设计应初步考虑未来数据安全和隐私保护的需求，例如，如何在API层面设计权限控制，即使在MVP 0.5阶段仅为概念性设计。”
2.	开发阶段与任务规划 (Section 2)
o	阶段 0.5.1: 前端基础架构与 Mock 数据:
	现有内容: 内嵌 SKU 数据、药房位置数据。
	修订建议: 增加任务：“确保所有内嵌数据均为完全虚构，并文档化其虚构来源或生成方式。”
o	阶段 0.5.2: 医生端核心功能实现 & 阶段 0.5.3: 药房端核心功能实现:
	修订建议: 在这两个阶段的任务描述中，加入：“实现PRD中要求的‘测试版本’标识和模拟价格标注。” “如果PRD中包含模拟‘同意’流程，在此阶段实现其前端交互。”
o	阶段 0.5.5: 集成与测试:
	现有内容: 进行功能和可用性测试。
	修订建议: 增加：“进行‘合规风险点’检查，确保所有PRD中为规避风险而设计的功能（如测试标识、数据模拟声明）已正确实现并可见。”
3.	开发规范与规则 (MVP 0.5 前端) (Section 3)
o	数据管理:
	现有内容: 内嵌数据集中管理，不要分散在各组件中。明确标记为 Mock 数据。
	修订建议: 补充：“并确保在代码注释中说明这些数据的模拟性质，避免未来开发者误用。”
o	接口预留:
	现有内容: ...在代码中预留函数或 Hook，使用 Mock API 实现其行为...
	修订建议: 补充：“在预留接口时，应考虑未来真实 API 调用时可能需要的认证、授权和错误处理机制，即使在Mock实现中这些机制是简化的或跳过的。” (对应合规建议中的“为未来真实数据处理设计可扩展性”)
4.	新增章节或在结论中强调:
o	合规风险认知备忘录: 建议在SOP的开头或结尾，或者作为一个独立的超链接文档，提及团队应维护一份“MVP 0.5 合规风险与未来关注点备忘录”，记录下现阶段为规避风险所做的努力，以及未来版本需要解决的合规问题。(对应合规建议中的“记录决策与风险认知”)
总结修订后的文档核心变化：
•	处处强调“模拟”和“测试”：在所有涉及数据、流程和功能的地方，都清晰标注其非真实性。
•	明确数据处理边界：清晰说明MVP 0.5不涉及真实敏感数据。
•	融入基础合规动作：将“测试标识”、“模拟同意流程”等低成本合规措施具体化到PRD和SOP的任务中。
•	为未来铺垫：在技术设计和规范中，体现对未来合规需求的考虑和扩展性。
•	提升风险意识：通过文档引导团队认识到早期的合规风险，并主动采取规避措施。
