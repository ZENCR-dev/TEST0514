---
description: 上传Git前的本地自检流程
globs: 
alwaysApply: false
---
# 本地代码库自检流程 (提交前执行)

## 目的

此流程旨在确保在将代码推送到远程仓库并在 GitHub Actions 中触发正式 CI 构建之前，代码已在本地通过了关键的质量检查。遵循此流程有助于减少 CI 失败的次数，并提高代码库的整体质量。

## 前置条件

- Node.js 版本：建议使用与项目 `package.json` 及 Vercel 部署环境一致的 Node.js 版本 (例如，LTS 版本如 Node.js 20.x)。
- 项目依赖已通过 `npm install` 或 `npm ci` 正确安装。

## 检查步骤

在每次执行 `git commit` 和 `git push` 之前，请在项目根目录下按顺序执行以下所有检查步骤：

### 1. 安装/更新依赖 (可选，但推荐在拉取最新代码后执行)

确保您的本地依赖与 `package-lock.json` 文件同步。

```bash
npm ci
```
或者，如果只是更新，可以使用：
```bash
npm install
```
**目标**: 确保依赖的一致性，避免因依赖问题导致的构建或运行时错误。

### 2. 运行 ESLint 代码检查

检查代码风格、潜在错误和最佳实践符合性。

```bash
npm run lint
```
**目标**:
- **必须修复所有 ESLint 报告的错误 (Errors)。**
- 强烈建议修复所有警告 (Warnings) 以保持代码整洁。
- 在此步骤完成后，不应有任何 ESLint 错误输出。

### 3. 运行项目构建

编译项目，检查类型错误和其他构建时问题。

```bash
npm run build
```
**目标**:
- **必须修复所有导致构建失败的错误。**
- 构建过程应成功完成，没有任何错误。

### 4. 运行自动化测试 (如果已配置)

执行单元测试、集成测试等，验证代码功能是否符合预期。

```bash
npm run test
```
**目标**:
- **理想情况下，所有测试用例都应通过。**
- 如果有测试失败，应在提交前修复相关代码和测试。

## 提交与推送指南

- **只有当上述所有检查步骤（特别是 ESLint 和构建）都成功通过并没有报告任何错误时，才可将代码提交 (`git commit`) 到本地仓库。**
- 在推送到远程仓库 (`git push`) 之前，再次确认所有本地检查均已通过。
- GitHub Actions 中的 CI 工作流 (`.github/workflows/CIprevercel.yml`) 将作为最终的线上质量把关。

遵循此本地自检流程，将有助于提升开发效率和代码质量。 