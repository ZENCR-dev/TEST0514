---
description: 现阶段开发计划和进度记录
globs: 
alwaysApply: false
---
# MVP v0.5 药房端扫描与预览功能实现方案 (Vercel 部署整合版)

## 目标
在纯前端实现药房端通过设备摄像头扫描处方QR码，解析内嵌文本，匹配内嵌模拟数据，计算模拟批发价，并将结果展示在可复用的预览组件中。整个开发和测试过程将利用Vercel的预览部署功能，确保可在真实的移动设备上通过HTTPS进行测试。

## 前置条件
- 已完成MVP v0.5基础框架搭建(阶段一)
- 已内嵌MockSKUData(包含code, name, retailPrice, costPrice, wholesalePrice等字段), 位于`src/mocks/medicineData.ts`
- 已搭建基础页面路由，包含药房端扫描页面 `src/pages/pharmacy/scan.tsx`
- 已有可复用的处方预览React组件`src/components/prescription/PrescriptionPreview.tsx`，该组件能接收结构化数据并渲染处方单样式
- **已在医师端实现了处方创建和QR码生成功能，QR码格式已定义**，位于`src/components/prescription/PrescriptionPreview.tsx`第32-43行
- **目前仅创建了GitHub仓库**([https://github.com/ZENCR-dev/TEST0514](mdc:https:/github.com/ZENCR-dev/TEST0514))，**但代码尚未推送**
- **Vercel项目待创建**，将在代码推送到GitHub仓库后进行

## 开发任务分割与顺序

### 任务0: 配置仓库并部署到Vercel (准备工作)

#### 任务0.1: 初始化Git仓库并推送代码
- **复杂度**: 低
- **开发动作**: 初始化本地Git仓库，添加远程仓库，推送代码
- **所需依赖**: Git
- **功能测试**: 确认GitHub仓库显示推送的代码

#### 任务0.2: 在Vercel上创建并配置项目
- **复杂度**: 低
- **开发动作**: 在Vercel上创建新项目，连接GitHub仓库
- **所需依赖**: Vercel账户
- **功能测试**: 确认Vercel成功部署项目

### 阶段A: 相机访问与原始扫码解析 (核心新功能)

#### 任务A1: 集成QR码扫描库
- **复杂度**: 低
- **开发动作**: 在项目中添加并配置html5-qrcode库
- **所需依赖**: html5-qrcode NPM包
- **命名规则**: 遵循库的官方文档导入和初始化约定
- **功能测试**: 确认库已成功安装且可导入

#### 任务A2: 创建相机扫描组件结构
- **复杂度**: 中
- **开发动作**: 创建QrScanner组件，用于封装摄像头访问和扫描逻辑
- **所需依赖**: React
- **命名规则**: 组件文件: components/pharmacy/QrScanner.tsx
- **功能测试**: 组件能成功渲染，包含\<video\>元素占位符

#### 任务A3: 实现摄像头访问
- **复杂度**: 中
- **开发动作**: 在QrScanner组件内实现摄像头访问功能
- **所需依赖**: HTML5 MediaDevices API
- **命名规则**: 异步函数命名: enableCamera，视频流变量命名: stream
- **功能测试**: 测试摄像头权限获取和视频显示

#### 任务A4: Vercel预览部署测试(摄像头访问)
- **复杂度**: 中
- **开发动作**: 提交并推送代码，触发Vercel自动部署
- **所需依赖**: Git, Vercel平台配置
- **功能测试**: 在真实手机上测试摄像头访问功能

#### 任务A5: 集成扫描库到视频流
- **复杂度**: 中
- **开发动作**: 将QR码扫描库与视频流集成
- **所需依赖**: html5-qrcode库
- **命名规则**: 扫描器实例变量命名: html5QrcodeScanner
- **功能测试**: 确认扫描库开始工作

#### 任务A6: 处理扫描成功
- **复杂度**: 中
- **开发动作**: 实现扫描成功回调和数据传递
- **所需依赖**: html5-qrcode库，组件Props
- **命名规则**: 成功回调函数命名: onScanSuccessCallback，扫描结果变量: decodedText
- **功能测试**: 测试扫描识别和回调触发

#### 任务A7: 处理扫描错误与清理
- **复杂度**: 中
- **开发动作**: 实现错误处理和资源清理
- **所需依赖**: html5-qrcode库，MediaDevices API，React useEffect
- **命名规则**: 错误回调函数命名: onScanErrorCallback，清理函数命名: cleanupCameraAndScanner
- **功能测试**: 测试错误处理和组件卸载清理

#### 任务A8: 在药房页面集成扫描组件并管理状态
- **复杂度**: 中
- **开发动作**: 在药房扫描页面集成QrScanner组件
- **所需依赖**: QrScanner组件，React State
- **命名规则**: 药房主页面组件: pages/pharmacy/scan.tsx，状态变量: scanStatus, scannedQrText
- **功能测试**: 测试扫描组件在页面中的工作状态

### 阶段B: 文本解析与内嵌数据匹配 (前端数据处理)

#### 任务B1: 使用医师端QR码文本格式
- **复杂度**: 低 (复用)
- **开发动作**: 复用医师端QR码文本格式
- **所需依赖**: 医师端QR码格式定义 (`src/components/prescription/PrescriptionPreview.tsx`第32-43行)
- **功能测试**: 确保格式清晰，符合医师端生成的QR码格式

#### 任务B2: 创建文本解析工具函数
- **复杂度**: 中
- **开发动作**: 创建解析QR码文本的工具函数
- **所需依赖**: JavaScript字符串方法
- **命名规则**: 工具函数文件: utils/qrParser.ts，函数名: parseQrText
- **功能测试**: 测试解析各种格式的QR码文本

#### 任务B3: 实现内嵌SKU数据查找与批发总价计算
- **复杂度**: 中
- **开发动作**: 实现SKU查找和价格计算逻辑
- **所需依赖**: MockSKUData数组/对象 (`src/mocks/medicineData.ts`)，JavaScript数组方法
- **命名规则**: 结果结构命名: parsedPrescriptionForPreview
- **功能测试**: 测试数据查找和价格计算功能

#### 任务B4: 在扫描成功回调中整合解析与计算
- **复杂度**: 中
- **开发动作**: 将解析和计算逻辑整合到扫描成功回调中
- **所需依赖**: B3实现的逻辑，组件状态管理
- **功能测试**: 测试扫描成功后的数据处理流程

### 阶段C: 结果展示与UI细化 (前端UI/UX)

#### 任务C1: 扩展并适配处方预览组件
- **复杂度**: 高
- **开发动作**: 扩展PrescriptionPreview组件以适配药房端需求，显示药品价格和总价
- **所需依赖**: 现有`src/components/prescription/PrescriptionPreview.tsx`组件
- **命名规则**: 
  - 添加新的Props: `displayPriceType: 'retail' | 'wholesale'`
  - 添加新的Props: `showPrices?: boolean`
- **具体修改**:
  - 修改接口定义，添加新的Props
  - 取消注释并激活药品单价显示代码(第260-279行)
  - 取消注释并激活总价计算相关代码(第290-319行)
  - 实现根据帖数(copies)和药品数量计算总价的逻辑
- **功能测试**: 测试预览组件显示药房端特定数据

#### 任务C2: 在药房页面有条件渲染预览
- **复杂度**: 低
- **开发动作**: 在扫描成功后显示处方预览
- **所需依赖**: 修改后的PrescriptionPreview组件，药房主页组件状态
- **功能测试**: 测试扫描成功后的预览显示

#### 任务C3: 实现界面自适应样式
- **复杂度**: 中
- **开发动作**: 为药房页面实现响应式设计
- **所需依赖**: CSS/Tailwind
- **功能测试**: 测试不同设备上的页面显示

#### 任务C4: 添加用户引导与错误提示UI
- **复杂度**: 低
- **开发动作**: 添加用户友好的提示信息
- **所需依赖**: 组件状态
- **功能测试**: 测试各种状态下的提示信息显示

#### 任务C5: 集成手动输入二维码文本入口
- **复杂度**: 低
- **开发动作**: 提供手动输入QR码文本的功能
- **所需依赖**: React State, HTML Input
- **功能测试**: 测试手动输入功能

#### 任务C6: 模拟提交报价单按钮
- **复杂度**: 低
- **开发动作**: 添加模拟提交功能
- **所需依赖**: 组件状态，HTML Button
- **功能测试**: 测试模拟提交功能

### 阶段D: Vercel预览部署与跨设备测试 (核心测试阶段)

#### 任务D1: 准备最终代码并触发Vercel预览部署
- **复杂度**: 低
- **开发动作**: 提交并推送完整代码
- **所需依赖**: Git
- **功能测试**: 确认Vercel自动部署成功

#### 任务D2: 执行跨设备功能与可用性测试
- **复杂度**: 高
- **开发动作**: 在多种设备上测试应用
- **所需依赖**: Vercel预览URL，测试设备
- **功能测试**: 全面测试应用功能和用户体验

#### 任务D3: 修复Bug并迭代
- **复杂度**: 中
- **开发动作**: 根据测试结果修复问题
- **所需依赖**: 代码编辑器，Git
- **功能测试**: 重复测试直到问题解决

### 阶段E: MVP 0.5完成与Vercel正式部署

#### 任务E1: 最终代码清理与合并
- **复杂度**: 低
- **开发动作**: 代码清理和合并到主分支
- **所需依赖**: Git
- **功能测试**: 代码审查

#### 任务E2: Vercel正式部署与验证
- **复杂度**: 低
- **开发动作**: 触发Vercel生产环境部署
- **所需依赖**: Vercel平台配置
- **功能测试**: 在关键设备上进行最终测试

## 任务进度跟踪

| 阶段 | 任务 | 状态 | 完成日期 | 备注 |
|------|------|------|----------|------|
| 0 | 0.1: 初始化Git仓库并推送代码 | 未开始 | | |
| 0 | 0.2: 在Vercel上创建并配置项目 | 未开始 | | |
| A | A1: 集成QR码扫描库 | 未开始 | | |
| A | A2: 创建相机扫描组件结构 | 未开始 | | |
| A | A3: 实现摄像头访问 | 未开始 | | |
| A | A4: Vercel预览部署测试 | 未开始 | | |
| A | A5: 集成扫描库到视频流 | 未开始 | | |
| A | A6: 处理扫描成功 | 未开始 | | |
| A | A7: 处理扫描错误与清理 | 未开始 | | |
| A | A8: 在药房页面集成扫描组件 | 未开始 | | |
| B | B1: 使用医师端QR码文本格式 | 未开始 | | |
| B | B2: 创建文本解析工具函数 | 未开始 | | |
| B | B3: 实现SKU数据查找与计算 | 未开始 | | |
| B | B4: 整合解析与计算 | 未开始 | | |
| C | C1: 扩展并适配处方预览组件 | 未开始 | | |
| C | C2: 有条件渲染预览 | 未开始 | | |
| C | C3: 实现界面自适应样式 | 未开始 | | |
| C | C4: 添加用户引导与错误提示 | 未开始 | | |
| C | C5: 集成手动输入功能 | 未开始 | | |
| C | C6: 模拟提交报价单按钮 | 未开始 | | |
| D | D1: 触发Vercel预览部署 | 未开始 | | |
| D | D2: 执行跨设备测试 | 未开始 | | |
| D | D3: 修复Bug并迭代 | 未开始 | | |
| E | E1: 最终代码清理与合并 | 未开始 | | |
| E | E2: Vercel正式部署与验证 | 未开始 | | |

## Vercel部署检查清单

- [x] GitHub仓库创建完成 (https://github.com/ZENCR-dev/TEST0514)
- [ ] 代码已推送到GitHub
- [ ] Vercel账户已创建
- [ ] Vercel已连接GitHub仓库
- [ ] 基本环境变量已设置
- [ ] 构建命令已确认
- [ ] 输出目录已确认
- [ ] 部署域名已确认


